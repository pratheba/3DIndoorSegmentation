function clusters = GetClustersBasedOnTraingulatedFaces(faces,vertices,adjacencyListForFaces)
    
    [triangulatedVertex, vertexNormals, faceNormals] = ComputeVertexAndFaceNormal(faces,vertices);
    [centroid] = GetCentroidForTriangles(faces,vertices);

    numFaces = length(faces);
    isVisitedFaces = zeros(numFaces,1);
    clusterNumber = 0;

    faceField  = 'Faces';
    colorField = 'Color';
    clusterNumbers = cell(numFaces,numFaces);
    colorInformation = zeros(numFaces,1);
   
    figure();
    
    for i = 1:numFaces
        if(~isVisitedFaces(i))
            clusterNumber = clusterNumber+1;

            clusterFaces = i;
            uVector = faceNormals(i,:)';
            [clusterFaces, isVisitedFaces] = MeshRegionGrowingByComparingFaceNormals(faces, adjacencyListForFaces, i, uVector, isVisitedFaces,faceNormals,centroid,clusterFaces);
             if(length(clusterFaces) < GetGlobalClusterGroupSize)
                 disp('cluster group size is small');
                 disp(length(clusterFaces));
                % Combine the clusters with the neighbouring faces
                %% Store these values seperately
                % % Once we get all the clusters, we then take these groups and find the neighbours
                % % Combine with neighbours of majority OR combine them with neighbour group which is convex and had the smallest angle difference
            end

            clusterNumber{clusterNumber} = clusterFaces;
            
            colorInformation = DisplayCluster(faces(clusterFaces,:), vertices); 
            colorInformationV(clusterFaces,:) = colorInformation;
        end
    end
    hold off;
    clusters = struct(faceField, clusterNumbers, colorField, colorInformation);

end